# Dockerfile : docker에 의해 식별되는 특별한 이름
# 이 파일에는 자체 이미지를 빌드할 때 실행하려는 도커에 대한 명령이 포함됨
# 즉 자체 이미지에 대한 설정 명령이 포함됨
# 일반적으로 FROM 명령어로 시작됨

FROM node
# FROM을 통해 다른 베이스 이미지에 나만의 이미지를 구축할 수 있음
# docker hub에 있는 node 이미지를 기반으로 컨테이너를 처음 실행할 때 이 이미지가 로컬로 다운로드됨
# 실제로 이 이미지를 기반으로 컨테이너를 실행한 순간 로컬 머신에도 존재하게 됨

WORKDIR /app
# 도커에게 모든 명령이 그 폴더에서 실행되어야 한다고 알려주는 편리한 방법
# 도커 컨테이너의 작업 디렉토리를 설정하는 명령어
# 모든 후속 명령이 그 폴더 내부에서 실행될 것임을 알림

COPY . /app
# COPY (Host file System) (Image/ container file System)
# 도커에게 로컬 머신에 있는 파일이 이미지에 들어가야 하는지 알려줌
# COPY에 기본적으로 두개의 경로를 지정한다
# 첫번째 : 컨테이너의 외부, 즉 이미지의 외부 경로, 이미지로 복사되어야 할 파일들이 있는 곳
# . : 도커에게 기본적으로 도커파일이 포함된 동일한 폴더임을 알림(도커파일이 있는 곳에 복사되어야 할 파일들이 존재)
# 즉 첫번째 .은 이 프로젝트의 모든 폴더, 하위 폴더 및 파일을 복사해야 함을 도커에게 알려줌
# 두번째 . : 그 파일을 저장해야하는 이미지 내부의 경로
# 모든 이미지와 이미지를 기반으로 생성된 모든 컨테이너는 로컬 머신의 파일 시스템에서 완전히 분리된 자체 내부 파일 시스템 존재
# 도커 컨테이너의 내부에 숨겨져있음. 실제로 여기서는 루트 폴더, 즉 도커 컨테이너의 루트 엔트리를 사용하지 않고
# 전적으로 사용자가 선택한 서브 폴더를 사용하는 것이 좋다. 원하는 대로 이름을 지정할 수 있다.
# 여기서는 /app이라 지정. 만약 컨테이너 내부에 해당 폴더가 없으면 생성된다
# COPY . ./ 으로도 변경할 수 있다
# ./은 도커 컨테이너의 현재 작업 디렉토리를 의미함
# 작업 디렉토리를 /app으로 변경했기 때문에 RUN, COPY 모두 작업 디렉토리를 기준으로 실행

RUN npm install
# npm install 실행
# 기본적으로 이러한 모든 명령은 도커 컨테이너 및 이미지의 작업 디렉토리에서 실행됨
# 기본적으로 그 작업 디렉토리는 컨테이너 파일 시스템의 루트 폴더
# 해당 파일에서는 코드를 app 폴더에 복사하고 있음 -> npm install 역시 app 폴더 내에서 실행하길 원함
# 도커에게 모든 명령이 그 폴더에서 실행되어야 한다고 알려주는 편리한 방법은 모든것을 복사하기 전 특수한 명령을 설정함

EXPOSE 80
# 이 웹서버는 포트 80에서 수신을 대기함(app.listen(80))
# 도커 컨테이너는 격리(?) 되어 있기 때문에, 우리 로컬 환경과 분리되어있음
# 자체 내부 네트워크도 존재함
# 컨테이너 내부의 노드 애플리케이션에서 포트 80을 수신할 때, 컨테이너는 해당 포트를 로컬 기기에 노출하지 않음
# 컨테이너 내부에서만 수신 대기중
# 언제나 Dockerfile 마지막 명령 전에 해당 컨테이너가 시작될 때 우리 로컬 시스템에 특정 포트를
# 노출하길 바란다는 것을 도커에 알림

CMD ["node", "server.js"]
# 마지막 명령 : 모든 작업이 완료되면 서버를 시작
# CMD 명령어 사용
# RUN과의 차이점은 이미지가 생성될 때 실행되지 않고, 이미지를 기반으로 컨테이너가 시작될 때 실행됨
# 컨테이너가 실행된 이후 노드 서버를 실행
# CMD 명령을 사용하려면 배열을 전달해야함
# 도커에게 이미지를 기반으로 컨테이너가 생성될 때마다 그 컨테이너 내부에 있는 node 명령을 사용하여
# server 파일을 실행하도록 지시함
# CMD에 특정하지 않으면 베이스 이미지가 실행되며, 없는 경우 에러가 발생함

# RUN node server.js : 잘못된 명령어
# 이미지가 빌드될 때마다 실행되기 때문에 위와 같은 명령어는 올바르지 않음
# 이 파일에 있는 모든 코드는 이미지 설정을 위한 도커에 대한 명령어임
# 이미지는 컨테이너의 템플릿이다. 이미지를 실행하는 것이 아님. 이미지를 기반으로 컨테이너를 실행
# 이미지를 기반으로 컨테이너를 시작하는 경우에만 서버를 시작하고 싶은 것
# 하나의 동일한 이미지에서 여러 컨테이너를 시작하면 노드 서버도 여러개 시작되기 때문에 이 명령어는 옳지 않음